name: Android Emulator Screenshot & Connected Check with Appium

on:
  push:
    branches: [ master ]

jobs:
  emulator-screenshot:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Enable KVM on runner
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Install Appium and Node.js
        run: |
          sudo apt-get update
          sudo apt-get install -y nodejs npm
          npm install -g appium
          appium -v

      - name: Start Appium Server
        run: |
          nohup appium > appium.log 2>&1 &
          sleep 10

      - name: Create minimal Android app source and test files
        run: |
          mkdir -p app/src/main/java/com/example/helloworld
          mkdir -p app/src/main/res/layout
          mkdir -p app/src/main/res/values
          mkdir -p app/src/main/res/mipmap
          mkdir -p app/src/androidTest/java/com/example/helloworld
          echo "android.useAndroidX=true" > gradle.properties
          cat > settings.gradle <<EOF
          rootProject.name = "HelloWorld"
          include ':app'
          EOF
          cat > build.gradle <<EOF
          buildscript {
              repositories {
                  google()
                  mavenCentral()
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:8.1.3'
              }
          }
          allprojects {
              repositories {
                  google()
                  mavenCentral()
              }
          }
          EOF
          cat > app/build.gradle <<EOF
          plugins {
              id 'com.android.application'
          }
          android {
              namespace 'com.example.helloworld'
              compileSdk 33
              defaultConfig {
                  applicationId "com.example.helloworld"
                  minSdk 21
                  targetSdk 33
                  versionCode 1
                  versionName "1.0"
                  testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
              }
              buildTypes {
                  release {
                      minifyEnabled false
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                  }
              }
          }
          dependencies {
              implementation 'androidx.appcompat:appcompat:1.6.1'
              implementation 'com.google.android.material:material:1.9.0'
              testImplementation 'junit:junit:4.13.2'
              androidTestImplementation 'androidx.test.ext:junit:1.1.5'
              androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
              androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
              androidTestImplementation 'androidx.test:runner:1.5.2'
              androidTestImplementation 'androidx.test:rules:1.5.0'
              androidTestImplementation 'androidx.test:core:1.5.0'
              androidTestImplementation 'junit:junit:4.13.2'
          }
          EOF
          cat > app/src/main/AndroidManifest.xml <<EOF
          <manifest xmlns:android="http://schemas.android.com/apk/res/android"
                package="com.example.helloworld">
                 <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
                 <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
                 <uses-permission android:name="android.permission.MOUNT_UNMOUNT_FILESYSTEMS"/>
                <application
                    android:allowBackup="true"
                    android:icon="@mipmap/ic_launcher"
                    android:label="@string/app_name"
                    android:roundIcon="@mipmap/ic_launcher_round"
                    android:supportsRtl="true"
                    android:theme="@style/AppTheme"> <activity
                        android:name=".MainActivity"
                        android:exported="true">
                        <intent-filter>
                            <action android:name="android.intent.action.MAIN" />
                            <category android:name="android.intent.category.LAUNCHER" />
                        </intent-filter>
                    </activity>
                </application>
            </manifest>
          EOF
          cat > app/src/main/java/com/example/helloworld/MainActivity.java <<EOF
          package com.example.helloworld;
          import android.os.Bundle;
          import androidx.appcompat.app.AppCompatActivity;
          public class MainActivity extends AppCompatActivity {
              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
                  setContentView(R.layout.activity_main);
              }
          }
          EOF
          cat > app/src/main/res/layout/activity_main.xml <<EOF
          <?xml version="1.0" encoding="utf-8"?>
          <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:orientation="vertical"
              android:layout_width="match_parent"
              android:layout_height="match_parent"
              android:gravity="center">
              <TextView
                  android:id="@+id/hello"
                  android:layout_width="wrap_content"
                  android:layout_height="wrap_content"
                  android:text="Hello World from Actions!"
                  android:textSize="24sp"/>
          </LinearLayout>
          EOF
          cat > app/src/main/res/values/strings.xml <<EOF
          <resources>
              <string name="app_name">HelloWorld</string>
          </resources>
          EOF
          cat > app/src/main/res/values/styles.xml <<EOF
          <resources>
              <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar" />
          </resources>
          EOF
          cat > app/src/main/res/mipmap/ic_launcher.xml <<EOF
          <vector xmlns:android="http://schemas.android.com/apk/res/android"
              android:width="48dp"
              android:height="48dp"
              android:viewportWidth="48"
              android:viewportHeight="48">
              <path android:fillColor="#3DDC84" android:pathData="M0,0h48v48h-48z"/>
              <path android:fillColor="#FFF" android:pathData="M24,8a16,16 0 1,0 0,32a16,16 0 1,0 0,-32z"/>
          </vector>
          EOF
          cat > app/src/main/res/mipmap/ic_launcher_round.xml <<EOF
          <vector xmlns:android="http://schemas.android.com/apk/res/android"
              android:width="48dp"
              android:height="48dp"
              android:viewportWidth="48"
              android:viewportHeight="48">
              <path android:fillColor="#3DDC84" android:pathData="M24,4a20,20 0 1,0 0,40a20,20 0 1,0 0,-40z"/>
              <path android:fillColor="#FFF" android:pathData="M24,12a12,12 0 1,0 0,24a12,12 0 1,0 0,-24z"/>
          </vector>
          EOF
          cat > app/proguard-rules.pro <<EOF
          # No rules
          EOF
          cat > app/src/androidTest/java/com/example/helloworld/ExampleInstrumentedTest.java <<EOF
            package com.example.helloworld;
            import android.content.Context;
            import android.graphics.Bitmap;
            import android.os.Environment;
            import androidx.test.platform.app.InstrumentationRegistry;
            import androidx.test.ext.junit.runners.AndroidJUnit4;
            import androidx.test.espresso.Espresso;
            import androidx.test.espresso.matcher.ViewMatchers;
            import androidx.test.espresso.assertion.ViewAssertions;
            import androidx.test.rule.ActivityTestRule;
            import androidx.test.uiautomator.UiDevice;
            import org.junit.Rule;
            import org.junit.Test;
            import org.junit.runner.RunWith;
            import java.io.File;
            import static org.junit.Assert.assertEquals;
            import static androidx.test.espresso.matcher.ViewMatchers.withId;
            import static androidx.test.espresso.matcher.ViewMatchers.withText;
            import static androidx.test.espresso.assertion.ViewAssertions.matches;

            @RunWith(AndroidJUnit4.class)
            public class ExampleInstrumentedTest {
                @Rule
                public ActivityTestRule<MainActivity> activityRule =
                        new ActivityTestRule<>(MainActivity.class);
                @Test
                public void useAppContext() {
                    Context appContext = InstrumentationRegistry.getInstrumentation().getTargetContext();
                    assertEquals("com.example.helloworld", appContext.getPackageName());
                }
                @Test
                public void helloWorldTextViewIsDisplayed() {
                    Espresso.onView(withId(R.id.hello))
                            .check(matches(withText("Hello World from Actions!")));
                }
                @Test
                public void certainTextDoesNotExist() {
                    String nonExistentText = "Hello from Actions!";
                    Espresso.onView(withText(nonExistentText)).check(ViewAssertions.doesNotExist());
                }
                @Test
                public void saveDeviceScreenBitmap() {
                    UiDevice device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());
                    File dir = new File(
                        Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES),
                        "test_screenshots"
                    );
                    if (!dir.exists()) {
                        dir.mkdirs();
                    }
                    File screenshotFile = new File(dir, "ExampleInstrumentedTest_saveDeviceScreenBitmap.png");
                    System.out.println("dir:" + dir);
                    boolean success = device.takeScreenshot(screenshotFile);
                }
            }
          EOF

      - name: Set Gradle wrapper executable
        run: |
          gradle wrapper
          chmod +x gradlew

      # This step is no longer needed as the Appium test creation is now inside the runner script
      # - name: Create Appium Screenshot Test
      #   run: |
      #     mkdir -p app/src/test/java/com/example/appium
      #     cat > app/src/test/java/com/example/appium/AppiumScreenshotTest.java <<EOF
      #     # ... (Java code for Appium test) ...
      #     EOF

      - name: Run Connected and Appium Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          script: |
            adb wait-for-device
            adb devices
            sleep 5

            # Run connectedCheck (your existing Android instrumented tests)
            ./gradlew connectedCheck || true

            # --- Appium Test Execution ---
            # Create a temporary Gradle project for Appium tests
            mkdir -p appium-tests
            cat > appium-tests/build.gradle <<EOF
            plugins {
                id 'java'
            }
            repositories {
                mavenCentral()
            }
            dependencies {
                implementation 'io.appium:java-client:8.5.1' # Use the latest stable version
                testImplementation 'junit:junit:4.13.2'
            }
            EOF
            cat > appium-tests/src/main/java/com/example/appium/AppiumScreenshotTest.java <<EOF
            package com.example.appium;

            import io.appium.java_client.android.AndroidDriver;
            import io.appium.java_client.remote.MobileCapabilityType;
            import org.junit.Test;
            import org.openqa.selenium.OutputType;
            import org.openqa.selenium.remote.DesiredCapabilities;

            import java.io.File;
            import java.net.URL;
            import java.nio.file.Files;

            public class AppiumScreenshotTest {

                @Test
                public void takeScreenshotWithAppium() {
                    System.out.println("Starting Appium screenshot test...");
                    AndroidDriver driver = null;
                    try {
                        DesiredCapabilities capabilities = new DesiredCapabilities();
                        capabilities.setCapability(MobileCapabilityType.PLATFORM_NAME, "Android");
                        capabilities.setCapability(MobileCapabilityType.DEVICE_NAME, "emulator-5554");
                        capabilities.setCapability(MobileCapabilityType.AUTOMATION_NAME, "UiAutomator2"); // Important for Android
                        capabilities.setCapability(MobileCapabilityType.APP_PACKAGE, "com.example.helloworld");
                        capabilities.setCapability(MobileCapabilityType.APP_ACTIVITY, "com.example.helloworld.MainActivity");
                        capabilities.setCapability(MobileCapabilityType.NO_RESET, true); // Keep the app data

                        URL appiumServerUrl = new URL("http://localhost:4723/wd/hub");
                        System.out.println("Connecting to Appium server at: " + appiumServerUrl);
                        driver = new AndroidDriver(appiumServerUrl, capabilities);
                        System.out.println("Connected to Appium driver. Waiting 5 seconds...");
                        Thread.sleep(5000); // Give the app time to load

                        File srcFile = driver.getScreenshotAs(OutputType.FILE);
                        File screenshotsDir = new File("screenshots"); // This will create 'appium-tests/screenshots'
                        if (!screenshotsDir.exists()) {
                            screenshotsDir.mkdirs();
                            System.out.println("Created screenshots directory: " + screenshotsDir.getAbsolutePath());
                        }
                        File targetFile = new File(screenshotsDir, "appium_screenshot.png");
                        Files.copy(srcFile.toPath(), targetFile.toPath());
                        System.out.println("Screenshot saved to: " + targetFile.getAbsolutePath());

                    } catch (Exception e) {
                        System.err.println("Appium test failed: " + e.getMessage());
                        e.printStackTrace();
                        # Exit with non-zero code to fail the step if the test throws an exception
                        exit 1
                    } finally {
                        if (driver != null) {
                            driver.quit();
                            System.out.println("Appium driver quit.");
                        }
                    }
                }
            }
            EOF
            # Go into the appium-tests directory and run the test
            cd appium-tests
            ../gradlew test --tests com.example.appium.AppiumScreenshotTest || true
            cd .. # Go back to the root directory
            # --- End Appium Test Execution ---

      - name: Upload Emulator Test Screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: emulator-screenshots
          path: appium-tests/screenshots/ # Corrected path to where the Appium test will save screenshots

      - name: Upload Android Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-test-results
          path: app/build/reports/