name: Android Emulator Screenshot & Connected Check

on:
  push:
    branches: [ master ]
  #workflow_dispatch:

jobs:
  emulator-screenshot:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2 # Using v2 for broader compatibility if needed, but v4 is generally preferred

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Create minimal Android app source and test files # <-- MODIFIED STEP
        run: |
          # --- Main App Source ---
          mkdir -p app/src/main/java/com/example/helloworld
          mkdir -p app/src/main/res/layout
          mkdir -p app/src/main/res/values
          mkdir -p app/src/main/res/mipmap

          echo "android.useAndroidX=true" > gradle.properties
          cat > settings.gradle <<EOF
          rootProject.name = "HelloWorld"
          include ':app'
          EOF
          cat > build.gradle <<EOF
          buildscript {
              repositories {
                  google()
                  mavenCentral()
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:8.1.3'
              }
          }
          allprojects {
              repositories {
                  google()
                  mavenCentral()
              }
          }
          EOF
          cat > app/build.gradle <<EOF
          plugins {
              id 'com.android.application'
          }
          android {
              namespace 'com.example.helloworld'
              compileSdk 33
              defaultConfig {
                  applicationId "com.example.helloworld"
                  minSdk 21
                  targetSdk 33
                  versionCode 1
                  versionName "1.0"
                  testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner" # <-- IMPORTANT: Add this for tests
              }
              buildTypes {
                  release {
                      minifyEnabled false
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                  }
              }
          }
          dependencies {
              implementation 'androidx.appcompat:appcompat:1.6.1'
              implementation 'com.google.android.material:material:1.9.0'

              # --- Test Dependencies (NEW) ---
              testImplementation 'junit:junit:4.13.2'
              androidTestImplementation 'androidx.test.ext:junit:1.1.5'
              androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
              androidTestImplementation 'androidx.test:runner:1.5.2' # Explicitly add runner and rules
              androidTestImplementation 'androidx.test:rules:1.5.0'
          }
          EOF
          cat > app/src/main/AndroidManifest.xml <<EOF
          <manifest xmlns:android="http://schemas.android.com/apk/res/android"
                package="com.example.helloworld">
                <application
                    android:allowBackup="true"
                    android:icon="@mipmap/ic_launcher"
                    android:label="@string/app_name"
                    android:roundIcon="@mipmap/ic_launcher_round"
                    android:supportsRtl="true"
                    android:theme="@style/Theme.AppCompat.Light.DarkActionBar">
                    <activity
                        android:name=".MainActivity"
                        android:exported="true">
                        <intent-filter>
                            <action android:name="android.intent.action.MAIN" />
                            <category android:name="android.intent.category.LAUNCHER" />
                        </intent-filter>
                    </activity>
                </application>
            </manifest>
          EOF
          cat > app/src/main/java/com/example/helloworld/MainActivity.java <<EOF
          package com.example.helloworld;
          import android.os.Bundle;
          import androidx.appcompat.app.AppCompatActivity;
          import android.widget.TextView; // Import TextView
          import R.layout; // Import R.layout for activity_main
          public class MainActivity extends AppCompatActivity {
              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
                  setContentView(R.layout.activity_main);
                  // Optional: Set text programmatically if you want to test that specific flow
                  // TextView helloTextView = findViewById(R.id.hello);
                  // helloTextView.setText("Hello World from Actions!");
              }
          }
          EOF
          cat > app/src/main/res/layout/activity_main.xml <<EOF
          <?xml version="1.0" encoding="utf-8"?>
          <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:orientation="vertical"
              android:layout_width="match_parent"
              android:layout_height="match_parent"
              android:gravity="center">
              <TextView
                  android:id="@+id/hello"
                  android:layout_width="wrap_content"
                  android:layout_height="wrap_content"
                  android:text="Hello World from Actions!"
                  android:textSize="24sp"/>
          </LinearLayout>
          EOF
          cat > app/src/main/res/values/strings.xml <<EOF
          <resources>
              <string name="app_name">HelloWorld</string>
          </resources>
          EOF
          cat > app/src/main/res/values/styles.xml <<EOF
          <resources>
              <style name="Theme.AppCompat.Light.DarkActionBar" parent="Theme.AppCompat.Light.DarkActionBar" />
          </resources>
          EOF
          cat > app/src/main/res/mipmap/ic_launcher.xml <<EOF
          <vector xmlns:android="http://schemas.android.com/apk/res/android"
              android:width="48dp"
              android:height="48dp"
              android:viewportWidth="48"
              android:viewportHeight="48">
              <path android:fillColor="#3DDC84" android:pathData="M0,0h48v48h-48z"/>
              <path android:fillColor="#FFF" android:pathData="M24,8a16,16 0 1,0 0,32a16,16 0 1,0 0,-32z"/>
          </vector>
          EOF
          cat > app/src/main/res/mipmap/ic_launcher_round.xml <<EOF
          <vector xmlns:android="http://schemas.android.com/apk/res/android"
              android:width="48dp"
              android:height="48dp"
              android:viewportWidth="48"
              android:viewportHeight="48">
              <path android:fillColor="#3DDC84" android:pathData="M24,4a20,20 0 1,0 0,40a20,20 0 1,0 0,-40z"/>
              <path android:fillColor="#FFF" android:pathData="M24,12a12,12 0 1,0 0,24a12,12 0 1,0 0,-24z"/>
          </vector>
          EOF
          cat > app/proguard-rules.pro <<EOF
          # No rules
          EOF

          # --- Instrumentation Test Source (NEW) ---
          mkdir -p app/src/androidTest/java/com/example/helloworld # <-- NEW: Create test directory
          cat > app/src/androidTest/java/com/example/helloworld/ExampleInstrumentedTest.java <<EOF
          package com.example.helloworld;

          import android.content.Context;
          import androidx.test.platform.app.InstrumentationRegistry;
          import androidx.test.ext.junit.runners.AndroidJUnit4;
          import androidx.test.espresso.Espresso;
          import androidx.test.espresso.matcher.ViewMatchers;
          import androidx.test.espresso.assertion.ViewAssertions;
          import androidx.test.rule.ActivityTestRule;

          import org.junit.Test;
          import org.junit.runner.RunWith;
          import org.junit.Rule;

          import static org.junit.Assert.*;
          import static androidx.test.espresso.matcher.ViewMatchers.withId;
          import static androidx.test.espresso.matcher.ViewMatchers.withText;
          import static androidx.test.espresso.assertion.ViewAssertions.matches;


          /**
           * Instrumented test, which will execute on an Android device.
           *
           * @see Testing documentation
           */
          @RunWith(AndroidJUnit4.class)
          public class ExampleInstrumentedTest {

              // Rule to launch MainActivity before each test
              @Rule
              public ActivityTestRule<MainActivity> activityRule =
                      new ActivityTestRule<>(MainActivity.class);

              @Test
              public void useAppContext() {
                  // Context of the app under test.
                  Context appContext = InstrumentationRegistry.getInstrumentation().getTargetContext();
                  assertEquals("com.example.helloworld", appContext.getPackageName());
              }

              @Test
              public void helloWorldTextViewIsDisplayed() {
                  // Check if the TextView with ID R.id.hello displays the correct text
                  Espresso.onView(withId(R.id.hello))
                          .check(matches(withText("Hello World from Actions!")));
              }
          }
          EOF

      - name: Set Gradle wrapper # This step is important if gradlew isn't already committed
        run: |
          gradle wrapper
          chmod +x gradlew

      - name: Run Connected Tests (gradlew connectedCheck) # <-- MODIFIED STEP
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          script: |
            echo "--- Running gradlew connectedCheck ---"
            # This task will build the app, build the test app, install both, run tests, and report results.
            ./gradlew connectedCheck
            echo "--- gradlew connectedCheck finished ---"

            # Optional: You can still take a screenshot after tests, but the primary goal for connectedCheck is test results.
            # adb shell screencap -p /sdcard/screenshot.png
            # adb pull /sdcard/screenshot.png .
            # adb shell screenrecord /sdcard/demo.mp4 --time-limit 10
            # adb pull /sdcard/demo.mp4 .

      - name: Upload Test Results (if any) # Optional, but good practice
        if: always() # Ensure this runs even if tests fail
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: app/build/reports/androidTests/connected/ # Default path for test reports
          # You can also upload test logs if needed
          # path: app/build/outputs/androidTest-results/connected/

      # - name: Upload Emulator Screenshot and Video (if desired, from previous steps)
      #   # Uncomment and configure if you still want a screenshot/video after tests
      #   # uses: actions/upload-artifact@v4
      #   # with:
      #   #   name: emulator-visuals
      #   #   path: |
      #   #     screenshot.png # Make sure you take this screenshot in the above step
      #   #     demo.mp4     # Make sure you record this video in the above step